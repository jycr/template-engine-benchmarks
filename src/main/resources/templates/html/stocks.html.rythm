<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
  <title>Stock Prices</title>
 </head>
 <body>
  <h1>Stock Prices</h1>
  <table>
   <thead>
    <tr><th>symbol</th><th>name</th><th>price</th><th>change</th><th>ratio</th></tr>
   </thead>
   <tbody>
@**
 * Rythm is a static typed template, you need to 
 * declare variables and you can import any 
 * packages and classes used in the template
 *@
@import teb.model.Stock
@args java.util.List<Stock> items
@**
 * by default rythm escape all expression output
 * here we use @raw() to prevent escaping as 
 * we know these are safe data
 *@
@raw() {
@**
 * Special notes to this @for loop
 *
 * Rythm do it's best to speculate the Type of the iterating element
 * In our case, because you have already declared [items]'s type as 
 * 'List<Stock>', so Rythm knows that the type of [item] is 'Stock', 
 * so you are safe to omit 'Stock' before [item].
 *
 * However if your iterable is an expression than a variable name or
 * it is not a declared as a template variable then you must give a
 * type to the iterating element, otherwise Rythm will give it a type
 * 'java.lang.Object'
 *@
    @for(item: items) {
        <tr>
        @*
         Rythm allow you to declare local variables and call any java methods inside @{ and }
        *@
        @{ 
            String symbol = item.getSymbol(); 
        }
         <td><a href="/stocks/@symbol">@symbol</a></td>
         @*
          unlike Velocity and other dynamic template engine, Rythm
          does not support JavaBean spec, ie. call to @item.url 
          automatically transferred to @item.getUrl()
         *@
         <td><a href="@item.getUrl()">@(item.getName())</a></td>
         <td>@item.getPrice()</td>
         <td>@item.getChange()</td>
         <td>@item.getRatio()</td>
        </tr>
    }
}
   </tbody>
  </table>

 </body>
</html>